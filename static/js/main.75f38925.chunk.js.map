{"version":3,"sources":["components/BookDetail.js","actions/booksAction.js","components/BooksList.js","components/BooksForm.js","components/NavBar.js","App.js","reportWebVitals.js","reducers/booksReducer.js","reducers/allReducer.js","index.js"],"names":["BookDetail","Book","dispatch","useDispatch","inputRef","useRef","inputRef2","useState","switcher","setswitcher","handleSubmitBook","e","id","title","auther","preventDefault","current","value","type","payload","handleSubmitAuther","className","style","textDecoration","isCompleted","onClick","onSubmit","defaultValue","ref","required","BooksList","Books","useSelector","state","booksReducer","length","map","BooksForm","setTitle","setAuther","addBooks","placeholder","onChange","target","NavBar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","action","uuid","filter","book","allReducer","combineReducers","persistedState","localStorage","getItem","JSON","parse","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75f38925.chunk.js","sourcesContent":["import React, { Fragment, useState, useRef } from \"react\";\r\nimport { useDispatch } from 'react-redux' ;\r\nimport {removeBooks , editBooks , editAuther ,completedBook} from '../actions/booksAction' ;\r\n\r\nconst BookDetail = ({ Book }) => {           //recieve the props & destruction\r\n  \r\n    const dispatch = useDispatch() ;\r\n \r\n  const inputRef = useRef();                     // referance of clicked input (to store the updated value)\r\n  const inputRef2 = useRef();                    // referance of clicked input (to store the updated value)\r\n \r\n  const [switcher, setswitcher] = useState(1);    //state to switch between data & updating forms\r\n\r\n  const showForm = () => {             //showing the data of each book in the list\r\n\r\n    return ( <li>\r\n        <div className=\"title\" style={{ textDecoration: Book.isCompleted ? \"line-through\" : \"\" }}\r\n          onClick={() => setswitcher(2)}  > {Book.title} </div>\r\n\r\n        <div className=\"auther\" style={{ textDecoration: Book.isCompleted ? \"line-through\" : \"\" }}\r\n          onClick={() => setswitcher(3)} > {Book.auther}  </div>\r\n\r\n        <button className=\"f\" onClick={() => dispatch( completedBook(Book.id,Book.title,Book.auther,Book.isCompleted )) }>\r\n                Finished / Unfinished  </button>  \r\n\r\n        <button className=\"r\" onClick={() => dispatch( removeBooks(Book.id))}>Remove</button>\r\n      </li>   );   };\r\n\r\n\r\n  const editBookForm = () => {        // edit book input after clicking on it using (handleSubmitBook)\r\n    return (\r\n      <form className=\"editForm\" onSubmit={handleSubmitBook}>\r\n        <input type=\"text\" defaultValue={Book.title} ref={inputRef} required />\r\n        <div className=\"auther\">{Book.auther}</div>\r\n      </form>  );  };\r\n\r\n\r\n  const handleSubmitBook = (e) => {       // function to submit the new book title\r\n    e.preventDefault();\r\n    dispatch(editBooks(Book.id, inputRef.current.value , Book.auther)) ;\r\n    setswitcher(1);   };\r\n\r\n\r\n  const editAutherForm = () => {         // edit auther input after clicking on it using (handleSubmitAuther)\r\n    return (\r\n      <form className=\"editForm\" onSubmit={handleSubmitAuther}>\r\n        <div className=\"title\">{Book.title}</div>\r\n        <input type=\"auther\" defaultValue={Book.auther} ref={inputRef2} required />\r\n      </form>  );   };\r\n\r\n\r\n  const handleSubmitAuther = (e) => {    // function to submit the new book title\r\n    e.preventDefault();\r\n    dispatch (editAuther(Book.id,inputRef2.current.value , Book.title));\r\n    setswitcher(1);   }; \r\n\r\n\r\n  const toggler = () => {        // function to switch between showing data & showing updating forms\r\n    if (switcher === 1) {\r\n      return showForm();\r\n    } else if (switcher === 2) {\r\n      return editBookForm();\r\n    } else {\r\n      return editAutherForm();\r\n    }   };\r\n\r\n\r\n  return <Fragment>{toggler()} </Fragment>;   // [BookDetail component] will return toggler()\r\n};\r\n\r\nexport default BookDetail;\r\n","export const addBooks =(title, auther) =>{\r\n    return {\r\n        type : 'ADD',\r\n        payload : { title:title , auther:auther }\r\n    };\r\n};\r\n\r\nexport const removeBooks =(id) =>{\r\n    return {\r\n        type : 'REMOVE',\r\n        payload : { id:id }\r\n    };\r\n};\r\n\r\nexport const editBooks =(id,title, auther) =>{\r\n    return {\r\n        type : 'EDITBOOK',\r\n        payload : { id:id , title:title , auther:auther }\r\n    };\r\n};\r\n\r\nexport const editAuther =(id, auther ,title) =>{\r\n    return {\r\n        type : 'EDITAUTHER',\r\n        payload : { id:id , auther:auther , title:title  }\r\n    };\r\n};\r\n\r\nexport const completedBook =(id,title, auther , isCompleted) =>{\r\n    return {\r\n        type : 'COMPLETED',\r\n        payload : { id:id , title:title , auther:auther , isCompleted : isCompleted }\r\n    };\r\n};\r\n\r\n","import {useSelector } from 'react-redux' ;\r\nimport BookDetail from \"./BookDetail\";\r\n\r\nconst BooksList = () => {\r\n\r\n    const  Books  = useSelector(state => state.booksReducer);        //get the state  \r\n  \r\n  return Books.length ? (               //pass data to the detail component if the state is not empty   \r\n    <div className='list'>     \r\n      <ul>\r\n        {Books.map((Book) => (\r\n          <BookDetail Book={Book} key={Book.id} />                  \r\n        ))}\r\n      </ul>\r\n      <p className='info'>- click on the title or auther name to edit it's value</p>\r\n    </div>\r\n  ) : (\r\n    <div className=\"noBooks\">There is no Books to read ... Please enter new ones</div>\r\n  );\r\n};\r\n\r\nexport default BooksList;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from 'react-redux' ;\r\nimport {addBooks} from '../actions/booksAction' ;\r\n\r\nconst BooksForm = () => {\r\n    \r\n    const dispatch = useDispatch() ;\r\n    \r\n    const [title, setTitle] = useState('');              // state to store the title input value   \r\n    const [auther, setAuther] = useState('');             // state to store the auther input value \r\n\r\n    const handleSubmit =(e)=>{           // prevent refresh & pass the data to the function & clear the inputs\r\n        e.preventDefault();\r\n        dispatch(addBooks(title,auther));\r\n        setTitle('');\r\n        setAuther('');        \r\n    }\r\n \r\n    return (                    // form to add new book by calling (handleSubmit) & set the values by oncahnge\r\n   <form className=\"addForm\" onSubmit={handleSubmit}>\r\n       <input type=\"text\" placeholder=\"Enter title ...\"  value={title}\r\n       onChange={(e)=>setTitle(e.target.value)} required />\r\n       <input type=\"text\" placeholder=\"Enter auther's name ...\"  value={auther}\r\n       onChange={(e)=>setAuther(e.target.value)} required />\r\n       <input type=\"submit\" value=\"Add Book\" className=\"addButton\"/>\r\n   </form>\r\n  );\r\n};\r\n\r\nexport default BooksForm;\r\n","\r\nimport {useSelector } from 'react-redux' ;\r\n\r\n\r\n\r\nconst NavBar = () => {\r\n\r\n  const  Books  = useSelector(state => state.booksReducer);        //get the state  \r\n\r\n  return (           //show a welcome message & return the number of books inside the state  \r\n    <nav>\r\n      <h1>Welcome to your books reading list</h1>\r\n      <h4>You have <span>{Books.length}</span> Books on your reading list</h4>\r\n      <hr></hr>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;","import BooksList from './components/BooksList';\nimport BooksForm from './components/BooksForm';\nimport NavBar from './components/NavBar';\n// the parent component that contain all other components\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <BooksForm />\n      <BooksList />  \n    </div>\n  );\n} \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import uuid from \"react-uuid\";\r\n\r\nconst initState =[               // the stae that will be shared with the other components\r\n    {\r\n      title: \"The lord of the rings\",\r\n      auther: \"J.R.R. Tolkien\",\r\n      id: 0,\r\n      isCompleted: false,\r\n    },\r\n    {\r\n      title: \"Game of thrones\",\r\n      auther: \"George R.R. Martin\",\r\n      id: 1,\r\n      isCompleted: false,\r\n    }, \r\n  ] ;\r\n\r\nconst booksReducer = (state=initState,action) => {\r\n    switch(action.type){\r\n    case 'ADD' :\r\n        return  [...state, { title :action.payload.title, auther :action.payload.auther , id: uuid(), isCompleted: false }] ;\r\n     case 'REMOVE' :\r\n         return state.filter((Book) => Book.id !== action.payload.id) ;\r\n     case 'EDITBOOK' :\r\n         return state.map(book=>(book.id===action.payload.id) ? {title :action.payload.title, auther :action.payload.auther ,id :action.payload.id ,isCompleted: false }:book ) ;\r\n     case 'EDITAUTHER' :\r\n         return state.map(book=>(book.id===action.payload.id) ? {title :action.payload.title, auther :action.payload.auther ,id :action.payload.id ,isCompleted: false }:book ) ;    \r\n     case 'COMPLETED' :\r\n         return state.map(book=>(book.id===action.payload.id) ? {title :action.payload.title, auther :action.payload.auther ,id :action.payload.id ,isCompleted: !action.payload.isCompleted }:book ) ;\r\n         default :\r\n      return state ;\r\n    }\r\n};\r\n\r\nexport default booksReducer ;","import booksReducer from './booksReducer' ;\r\nimport {combineReducers} from 'redux' ;\r\n\r\n// if we have multi-Reducers we combine them into one by combineReducers & pass it to the store \r\n\r\nconst allReducer = combineReducers ({\r\n    booksReducer:booksReducer ,\r\n});\r\n\r\nexport default allReducer ;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {createStore} from 'redux';\nimport allReducer from './reducers/allReducer' ;\nimport {Provider} from 'react-redux';\n\n\n/* local storage  1-(get data & convert the object to string & store it ) \n                  2- pass it to the store   3-(set new data to localStorage)             */\n                  const persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')): {} ;                  \n\n// creating the store and passing the reducer & browser local storage & dev tools \n\nconst store = createStore (allReducer , persistedState ,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() ) ;\n    \n\nstore.subscribe(()=>{localStorage.setItem('reduxState', JSON.stringify(store.getState())) }) ;\n                  \n                  \n//wraping the parent APP component with the store provider and rendering it on our index \n\nReactDOM.render(<Provider store={store}> <App /> </Provider> ,  document.getElementById('root'));\n\n\nreportWebVitals();\n"],"sourceRoot":""}